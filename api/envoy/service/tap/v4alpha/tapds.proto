syntax = "proto3";

package envoy.service.tap.v4alpha;

import "envoy/config/tap/v4alpha/common.proto";
import "envoy/service/discovery/v4alpha/discovery.proto";

import "google/api/annotations.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.service.tap.v4alpha";
option java_outer_classname = "TapdsProto";
option java_multiple_files = true;
option java_generic_services = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: Tap discovery service]

// [#not-implemented-hide:] Tap discovery service.
service TapDiscoveryService {
  rpc StreamTapConfigs(stream discovery.v4alpha.DiscoveryRequest)
      returns (stream discovery.v4alpha.DiscoveryResponse) {
  }

  rpc DeltaTapConfigs(stream discovery.v4alpha.DeltaDiscoveryRequest)
      returns (stream discovery.v4alpha.DeltaDiscoveryResponse) {
  }

  rpc FetchTapConfigs(discovery.v4alpha.DiscoveryRequest)
      returns (discovery.v4alpha.DiscoveryResponse) {
    option (google.api.http).post = "/v3/discovery:tap_configs";
    option (google.api.http).body = "*";
  }
}

// [#not-implemented-hide:] A tap resource is essentially a tap configuration with a name
// The filter TapDS config references this name.
message TapResource {
  option (udpa.annotations.versioning).previous_message_type = "envoy.service.tap.v3.TapResource";

  // The name of the tap configuration.
  string name = 1 [(validate.rules).string = {min_bytes: 1}];

  // Tap config to apply
  config.tap.v4alpha.TapConfig config = 2;
}

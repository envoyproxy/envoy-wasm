# Generate api/BUILD based on API type database. This contains target for v2, v3
# and all API protos.

import os
import string
import sys

from tools.type_whisperer.api_type_db_pb2 import TypeDb

from google.protobuf import text_format

API_BUILD_FILE_TEMPLATE = string.Template(
    """# DO NOT EDIT. This file is generated by tools/proto_sync.py.

load("@rules_proto//proto:defs.bzl", "proto_library")

licenses(["notice"])  # Apache 2

proto_library(
    name = "v2_protos",
    visibility = ["//visibility:public"],
    deps = [
$v2_deps
    ],
)

proto_library(
    name = "v3_protos",
    visibility = ["//visibility:public"],
    deps = [
$v3_deps
    ],
)

proto_library(
    name = "all_protos",
    visibility = ["//visibility:public"],
    deps = [
        ":v2_protos",
        ":v3_protos",
    ],
)
""")


def LoadTypeDb(type_db_path):
  type_db = TypeDb()
  with open(type_db_path, 'r') as f:
    text_format.Merge(f.read(), type_db)
  return type_db


# Key sort function to achieve consistent results with buildifier.
def BuildOrderKey(key):
  return key.replace(':', '!')


# Remove any packages that are definitely non-root, e.g. annotations.
def FilterPkgs(pkgs):

  def AllowedPkg(pkg):
    return not pkg.startswith('envoy.annotations')

  return filter(AllowedPkg, pkgs)


def DepsFormat(pkgs):
  return '\n'.join('        "//%s:pkg",' % p.replace('.', '/')
                   for p in sorted(FilterPkgs(pkgs), key=BuildOrderKey))


if __name__ == '__main__':
  type_db_path, output_path = sys.argv[1:]
  type_db = LoadTypeDb(type_db_path)
  # TODO(htuch): generalize to > 2 versions
  v2_packages = set([])
  v3_packages = set([])
  # Phase 1, we use the upgraded packages as a means to figure out which
  # packages are explicitly in v2 vs. v3 by virtue of some breaking change.
  for name, desc in type_db.types.items():
    if desc.next_version_type_name:
      v2_packages.add(desc.qualified_package)
      v3_packages.add(type_db.types[desc.next_version_type_name].qualified_package)
  # Phase 2, we collect the rest of the packages not already binned and consider
  # them to be both v2 and v3.
  for name, desc in type_db.types.items():
    pkg = desc.qualified_package
    if pkg not in v2_packages and pkg not in v3_packages:
      v2_packages.add(pkg)
      v3_packages.add(pkg)
  # Generate BUILD file.
  build_file_contents = API_BUILD_FILE_TEMPLATE.substitute(v2_deps=DepsFormat(v2_packages),
                                                           v3_deps=DepsFormat(v3_packages))
  with open(output_path, 'w') as f:
    f.write(build_file_contents)
